import pyparsing as pp

pp.ParserElement.enable_packrat()

class SavedTextNode:
    def __init__(self, s, loc, tokens):
        start_pos = tokens[0]
        if len(tokens) == 3:
            end_pos = tokens[2]
        else:
            end_pos = loc
        self.text = s[start_pos:end_pos]
        assert len(tokens[1]) == 1
        self.tokens = tokens[1][0]
    def __repr__(self):
        return "SavedTextNode({})".format(self.text) + self.tokens.__repr__()

def wrap_with_user_tag(s):
    return "{{#user}}{}\n{{/user}}".format(s)

def wrap_with_assistant_tag(s):
    return "{{#assistant}}{}\n{{/assistant}}".format(s)

# Define whitespace and other elements
ws = pp.White()
opt_ws = pp.Optional(ws)

# Define comments
command_end = pp.Suppress(opt_ws + "}}") | pp.Suppress(opt_ws + "~}}" + opt_ws)
long_comment_start = pp.Suppress(pp.Literal("{{") + pp.Optional("~") + pp.Literal("!--"))
long_comment_end =  pp.Suppress(pp.Literal("--") + command_end)
not_long_comment_end = "-" + ~pp.FollowedBy("-}}") + ~pp.FollowedBy("-~}}")
long_comment_content = not_long_comment_end | pp.OneOrMore(pp.CharsNotIn("-"))
long_comment = SavedTextNode(pp.Group(pp.Combine(long_comment_start + pp.ZeroOrMore(long_comment_content) + long_comment_end))("long_comment").set_name("long_comment"))

comment_start = pp.Suppress("{{" + pp.Optional("~") + "!")
not_comment_end = "}" + ~pp.FollowedBy("}") | "~" + ~pp.FollowedBy("}}")
comment_content = not_comment_end | pp.OneOrMore(pp.CharsNotIn("~}"))
comment = SavedTextNode(pp.Group(pp.Combine(comment_start + pp.ZeroOrMore(comment_content) + command_end))("comment"))

# Define literals
string_literal = pp.Group(pp.Suppress('"') + pp.ZeroOrMore(pp.CharsNotIn('"')) + pp.Suppress('"') | pp.Suppress("'") + pp.ZeroOrMore(pp.CharsNotIn("'")) + pp.Suppress("'"))("string_literal")
number_literal = pp.Group(pp.Word(pp.srange("[0-9.]")))("number_literal")
boolean_literal = pp.Group("True" | pp.Literal("False"))("boolean_literal")

# Define other elements and commands (as provided in the previous code)
# ...

# Define block commands and block partials

# ...
block_command_call = always_call("command_call")
block_command_open = pp.Suppress(pp.Combine(command_start + "#")) + block_command_call + command_end
block_command_close = SavedTextNode(pp.Group(command_start + pp.Suppress("/") + command_name + command_end)("block_command_close").set_name("block_command_close"))
block_command_content = (pp.Group(program)("block_content_chunk") + pp.ZeroOrMore(block_command_sep + pp.Group(program)("block_content_chunk"))).set_name("block_content")
block_command <<= (block_command_open + SavedTextNode(pp.Group(block_command_content)("block_content")) + block_command_close).leave_whitespace()
block_command = SavedTextNode(pp.Group(block_command)("block_command")).set_name("block_command")

block_partial_open = pp.Combine(command_start + pp.Suppress("#>")) + block_partial_call + command_end
block_partial_close = command_start + pp.Suppress("/") + command_name + command_end
block_partial <<= block_partial_open + program + pp.Suppress(block_partial_close)
block_partial = SavedTextNode(pp.Group(block_partial)("block_partial"))

# Define the full grammar structure
program_chunk <<= (long_comment | comment | escaped_command | unrelated_escape | block_partial | block_command | partial | command | content).leave_whitespace()
program_chunk.setParseAction(enforce_single_command_rule)
program <<= pp.ZeroOrMore(program_chunk)("program").leave_whitespace().set_name("program")
grammar = (program + pp.StringEnd()).parse_with_tabs()
